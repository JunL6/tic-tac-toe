{"version":3,"sources":["determineWinner.js","square.js","board.js","game.js","index.js"],"names":["determineWinner","squares","winMatrix","xArray","map","value","index","push","oArray","find","subArray","every","i","includes","props","react_default","a","createElement","className","squareId","onClick","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","currentSquare","squareToRender","console","log","square_determineWinner","_this2","xIsNext","status","concat","d","key","renderSquare","Component","Game","state","history","Array","fill","stepNumber","isGameOver","handleClick","bind","assertThisInitialized","jumpTo","historyArray","event","target","slice","indexOf","alert","winner","newHistory","setState","Boolean","stepNum","_this3","board_Board","renderHistory","ReactDOM","render","game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.1a1bd021.chunk.js","sourcesContent":["/* determine winner */\nexport default function(squares) {\n  const winMatrix = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  // get X's array\n  const xArray = [];\n  squares.map((value, index) => {\n    if (value === \"X\") {\n      xArray.push(index);\n    }\n    return 0;\n  });\n  // console.log(\"xArray: \" + xArray);\n  /* get O's array */\n  const oArray = [];\n  squares.map((value, index) => {\n    if (value === \"O\") {\n      oArray.push(index);\n    }\n    return 0;\n  });\n  // console.log(\"oArray: \" + oArray);\n  /* determine if X wins */\n  const resultX = winMatrix.find(subArray => {\n    return subArray.every(i => {\n      return xArray.includes(i);\n    });\n  });\n  if (resultX) {\n    // alert(\"X win! \" + resultX);\n    return \"X\";\n  }\n  // determine if O wins\n  const resultO = winMatrix.find(subArray => {\n    return subArray.every(i => {\n      return oArray.includes(i);\n    });\n  });\n  if (resultO) {\n    // alert(\"X win! \" + resultX);\n    return \"O\";\n  }\n  return null;\n}\n","import React from \"react\";\n\nexport default function determineWinner(props) {\n  return (\n    <button\n      className={\"square squareID-\" + props.squareId}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n","import React, { Component } from \"react\";\nimport Square from \"./square\";\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    const currentSquare = props.squareToRender;\n    console.log(currentSquare);\n  }\n\n  renderSquare(i) {\n    return (\n      <Square\n        squareId={i}\n        value={this.props.squareToRender[i]}\n        onClick={this.props.onClick}\n      />\n    );\n  }\n\n  render() {\n    console.log(this.props.xIsNext);\n    const status = `Next player: ${this.props.xIsNext ? \"X\" : \"O\"}`;\n    // const status = \"..oo..oo..oo..oo..oo..oo..\";\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        {[0, 1, 2].map((d, index) => {\n          return (\n            <div className=\"board-row\" key={index}>\n              {this.renderSquare(index * 3)}\n              {this.renderSquare(index * 3 + 1)}\n              {this.renderSquare(index * 3 + 2)}\n            </div>\n          );\n        })}\n\n        {/* {this.state.isGameOver && <div className=\"alert\">Game Over!!!</div>} */}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport determineWinner from \"./determineWinner\";\nimport Board from \"./board\";\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [Array(9).fill(null)],\n      stepNumber: 0,\n      xIsNext: true,\n      isGameOver: false\n    };\n\n    /* bind functions that mutate the state */\n    this.handleClick = this.handleClick.bind(this);\n    this.jumpTo = this.jumpTo.bind(this); //this function is modifying the state\n  }\n\n  renderHistory(historyArray) {\n    return historyArray.map((value, index) => {\n      return (\n        <li key={index}>\n          <button\n            onClick={() => {\n              this.jumpTo(index);\n              console.log(\"jump to \", index);\n            }}\n          >\n            Go to move #$\n            {index}\n          </button>\n        </li>\n      );\n    });\n  }\n\n  handleClick(event) {\n    /* get square id from className from event.target */\n    const className = event.target.className;\n    const i = className.slice(className.indexOf(\"squareID-\") + 9);\n    /* get squares before click */\n    const squares = this.state.history[this.state.stepNumber].slice();\n\n    /* determine if the square was already filled */\n    if (this.state.isGameOver) {\n      alert(\"Game over\");\n    } else if (squares[i] === null) {\n      /* determine who is next */\n      squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n      /* determine who is the winner if there is one */\n      const winner = determineWinner(squares);\n\n      /* new history state */\n      const newHistory = this.state.history.slice(0, this.state.stepNumber + 1);\n      newHistory.push(squares);\n\n      this.setState({\n        history: newHistory,\n        stepNumber: this.state.stepNumber + 1,\n        xIsNext: !this.state.xIsNext,\n        isGameOver: Boolean(winner)\n      });\n    } else {\n      alert(\"this spot was filled already\");\n    }\n  }\n\n  jumpTo(stepNum) {\n    this.setState({ stepNumber: stepNum }, () => {\n      console.log(\"stepNum: \", this.state.stepNumber);\n    });\n  }\n\n  render() {\n    const squareToRender = this.state.history[this.state.stepNumber];\n    console.log(\"state stepNum:\", this.state.stepNumber);\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squareToRender={squareToRender}\n            onClick={this.handleClick}\n            xIsNext={this.state.xIsNext}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>history</div>\n          <ol>{this.renderHistory(this.state.history)}</ol>\n        </div>\n        <div className=\"winnerDeclarer\">\n          {this.state.isGameOver\n            ? \"Game Over! Winner: \" + determineWinner(squareToRender)\n            : \"\"}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./game\";\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}